Design

TCP server and client initialization:
We'll have a TCP server and client running in two different process.

Server: TCP server will get the local hostname and assign a port to client to connect.
Then TCP server found a available file descriptor and create a socket with the found fd.
After a connection is established, it reads the command from the fd, parse the command and get the operation.
Then it call _add()/_get/_get_all/_remove to modify data in the in-memory data storage and sent the response back through the socket.

Data Storage: For simplicity, I used an in memory array of a key value pair of size 20 to data storage. For get, it loop
through the array to find the matching key and put the found value in the command structure. For getall, concatenate all values
and return as a single string. For remove, clear the memory for the found entry in storage array. For add, loop through array to
find a available slot in array.

Client: TCP client will locate server via hostname and port. Then client search available file descriptor to use. The through the socket,
the client can send command to server. In the beginning, clinet read from stdin for the operations, then we parse the string into a command
structure and sent the command to server.

Proxy server: Proxy server has simliar structure as client, it connects to real server, after it get the value response back from server,
it will parse the value which contains "c,m,p,t" to duplicate those chars and display to console.

UDP server: I didn't finish the UDP server on time but the UDP server take similar structure as server. It doesn't need to listen
and send ack back when connections get established. It just keep the client the port and ip and send back response without checking if the
transmission succeed or not.

